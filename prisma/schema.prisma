// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
  // shadowDatabaseUrl = env("SHADOW_DATABASE_URL") // Only needed when using a cloud provider that doesn't support the creation of new databases, like Heroku. Learn more: https://pris.ly/migrate-shadow
}

generator client {
  provider = "prisma-client-js"
}

model Account {
  id                String   @id @default(cuid())
  createdAt         DateTime @default(now())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?  @db.Text
  access_token      String?  @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?  @db.Text
  session_state     String?
  // Foreign keys
  user              User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  // Foreign keys
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model User {
  id                String              @id @default(cuid())
  createdAt         DateTime            @default(now())
  updatedAt         DateTime            @updatedAt
  name              String?
  email             String?             @unique
  emailVerified     DateTime?
  image             String?
  bio               String?
  short_bio         String?
  education         String?
  work              String?
  skills            String[]
  hobbies           String[]
  // Foreign keys
  accounts          Account[]
  sessions          Session[]
  project           Project[]
  UserSocialProfile UserSocialProfile[]
}

model UserSocialProfile {
  id       String  @id @default(cuid())
  userId   String  @unique
  discord  String?
  linkedin String?
  twitch   String?
  website  String?
  github   String?
  twitter  String?
  medium   String?
  dev      String?
  // Foreign keys
  user     User    @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Project {
  id                 String            @id @default(cuid())
  createdAt          DateTime          @default(now())
  updatedAt          DateTime          @updatedAt
  userId             String
  title              String
  tags               String[]
  description        String
  difficulty_level   String
  skills             String[]
  technology_stack   String[]
  development_status String
  team_need          Int?
  // Foreign keys
  user               User              @relation(fields: [userId], references: [id], onDelete: Cascade)
  developmentTool    DevelopmentTool[]
  communication      Communication[]
}

model DevelopmentTool {
  id        String  @id @default(cuid())
  projectId String
  github    String
  jira      String?
  figma     String?
  trello    String?
  notion    String?
  // Foreign keys
  project   Project @relation(fields: [projectId], references: [id], onDelete: Cascade)
}

model Communication {
  id        String  @id @default(cuid())
  projectId String
  discord   String?
  twitch    String?
  twitter   String?
  slack     String?
  // Foreign keys
  project   Project @relation(fields: [projectId], references: [id], onDelete: Cascade)
}
